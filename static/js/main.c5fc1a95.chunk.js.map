{"version":3,"sources":["components/main.jsx","App.js","serviceWorker.js","index.js"],"names":["Main","state","userScore","computerScore","getComputerChoice","Math","floor","random","convertToWord","letter","win","userChoice","ComputerChoice","_this","setState","user","fontsize","sub","comp","document","querySelector","innerHTML","getElementById","classList","add","setTimeout","remove","reset","lose","draw","game","console","log","_this2","this","react_default","a","createElement","Fragment","id","className","onClick","src","alt","Component","App","main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c5fc1a95.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../App.css\";\r\n\r\nclass Main extends Component {\r\n  state = {\r\n    userScore: 0,\r\n    computerScore: 0\r\n  };\r\n\r\n  getComputerChoice = () => {\r\n    const choices = [\"r\", \"p\", \"s\"];\r\n    const randomNumber = Math.floor(Math.random() * 3);\r\n    return choices[randomNumber];\r\n  };\r\n\r\n  convertToWord = letter => {\r\n    if (letter === \"r\") return \"Rock\";\r\n    if (letter === \"p\") return \"Paper\";\r\n    else return \"Scissors\";\r\n  };\r\n\r\n  win = (userChoice, ComputerChoice) => {\r\n    const state = this.state;\r\n    state.userScore++;\r\n    this.setState({ state });\r\n    const user = \"user\".fontsize(3).sub();\r\n    const comp = \"comp\".fontsize(3).sub();\r\n    document.querySelector(\".results > p\").innerHTML =\r\n      this.convertToWord(userChoice) +\r\n      user +\r\n      \" beats \" +\r\n      this.convertToWord(ComputerChoice) +\r\n      comp +\r\n      \".You win!\";\r\n    document.getElementById(userChoice).classList.add(\"green-glow\");\r\n    setTimeout(function() {\r\n      document.getElementById(userChoice).classList.remove(\"green-glow\");\r\n    }, 300);\r\n    this.reset();\r\n  };\r\n\r\n  lose = (userChoice, ComputerChoice) => {\r\n    const state = this.state;\r\n    state.computerScore++;\r\n    this.setState({ state });\r\n    const user = \"user\".fontsize(3).sub();\r\n    const comp = \"comp\".fontsize(3).sub();\r\n    document.querySelector(\".results > p\").innerHTML =\r\n      this.convertToWord(ComputerChoice) +\r\n      comp +\r\n      \" beats \" +\r\n      this.convertToWord(userChoice) +\r\n      user +\r\n      \".You lose!\";\r\n    document.getElementById(userChoice).classList.add(\"red-glow\");\r\n    setTimeout(function() {\r\n      document.getElementById(userChoice).classList.remove(\"red-glow\");\r\n    }, 300);\r\n    this.reset();\r\n  };\r\n\r\n  draw = (userChoice, ComputerChoice) => {\r\n    const user = \"user\".fontsize(3).sub();\r\n    const comp = \"comp\".fontsize(3).sub();\r\n    document.querySelector(\".results > p\").innerHTML =\r\n      this.convertToWord(userChoice) +\r\n      user +\r\n      \" equals \" +\r\n      this.convertToWord(ComputerChoice) +\r\n      comp +\r\n      \".It's a draw!\";\r\n    document.getElementById(userChoice).classList.add(\"grey-glow\");\r\n    setTimeout(function() {\r\n      document.getElementById(userChoice).classList.remove(\"grey-glow\");\r\n    }, 300);\r\n  };\r\n\r\n  reset = () => {\r\n    if (this.state.userScore === 10 || this.state.computerScore === 10) {\r\n      const state = this.state;\r\n      state.userScore = 0;\r\n      state.computerScore = 0;\r\n      this.setState({ state });\r\n      document.querySelector(\".results > p\").innerHTML = \"Let's Start!!\";\r\n    };\r\n  };\r\n\r\n  game = userChoice => {\r\n    const ComputerChoice = this.getComputerChoice();\r\n    console.log(ComputerChoice);\r\n    // eslint-disable-next-line\r\n    switch (userChoice + ComputerChoice) {\r\n      case \"rs\":\r\n      case \"sp\":\r\n      case \"pr\":\r\n        this.win(userChoice, ComputerChoice);\r\n        break;\r\n      case \"rp\":\r\n      // eslint-disable-next-line\r\n      case \"rs\":\r\n      case \"sr\":\r\n        this.lose(userChoice, ComputerChoice);\r\n        break;\r\n      case \"rr\":\r\n      case \"pp\":\r\n      case \"ss\":\r\n        this.draw(userChoice, ComputerChoice);\r\n        break;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <header>\r\n          <h1 id=\"heading\">\r\n            <span id=\"rock\">Rock</span> <span id=\"paper\">Paper</span>{\" \"}\r\n            <span id=\"scissor\">Scissor</span>\r\n          </h1>\r\n        </header>\r\n        <div className=\"score-board\">\r\n          <div id=\"user-label\" className=\"badge\">\r\n            user\r\n          </div>\r\n          <div id=\"comp-label\" className=\"badge\">\r\n            comp\r\n          </div>\r\n          <span id=\"user-score\">{this.state.userScore}</span>:\r\n          <span id=\"computer-score\">{this.state.computerScore}</span>\r\n        </div>\r\n        <div className=\"results\">\r\n          <p>Let's Start!!</p>\r\n        </div>\r\n        <React.Fragment>\r\n          <div className=\"choices\">\r\n            <div className=\"choice\" id=\"r\">\r\n              <img\r\n                onClick={() => {\r\n                  this.game(\"r\", this.getComputerChoice());\r\n                }}\r\n                src=\"./images/rock.png\"\r\n                alt=\"rock\"\r\n              />\r\n            </div>\r\n            <div className=\"choice\" id=\"p\">\r\n              <img\r\n                onClick={() => {\r\n                  this.game(\"p\", this.getComputerChoice());\r\n                }}\r\n                src=\"./images/paper.png\"\r\n                alt=\"paper\"\r\n              />\r\n            </div>\r\n            <div className=\"choice\" id=\"s\">\r\n              <img\r\n                onClick={() => {\r\n                  this.game(\"s\", this.getComputerChoice());\r\n                }}\r\n                src=\"./images/scissor.png\"\r\n                alt=\"scissor\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </React.Fragment>\r\n        <p id=\"action-message\">Make your move.</p>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport Main from \"./components/main\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}